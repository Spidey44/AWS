The goal of this project is to create a well-integrated serverless app using various AWS services to build a powerful and scalable application architecture.
Application Created: http://product-visits-webform-2023.s3-website-us-east-1.amazonaws.com


![Serverless Architecture](https://github.com/Spidey44/AWS/assets/83247073/c3aef0b4-1547-4892-8ee5-09f704c75999)

APPLICATIONS SUMMARY

Step 1: Build a Static Website with Web Form on Amazon S3
* Description: Create a static website using HTML, CSS, and JavaScript and host it on Amazon S3. Include a web form to collect user input.
* Benefit: Hosting a static website on S3 is cost-effective and scalable. It allows easy deployment and distribution of the website across the globe.

Step 2: Set up a REST API with Amazon API Gateway
* Description: Configure an Amazon API Gateway to create a RESTful API that can receive data submitted through the web form.
* Benefit: API Gateway simplifies the process of creating and managing APIs, allowing seamless integration with other AWS services and external systems.

Step 3: Integrate API Gateway with AWS Lambda via Proxy Integration
* Description: Integrate the API Gateway with an AWS Lambda function to handle the incoming data without modifying it.
* Benefit: Proxy integration streamlines communication between the API Gateway and Lambda function, passing data directly to the Lambda function for processing.

Step 4: Use SQS Queue for Asynchronous Data Processing
* Description: Implement an Amazon Simple Queue Service (SQS) queue to store data received by the Lambda function and trigger periodic checks to send it to another Lambda function.
* Benefit: SQS enables decoupling of components, ensuring data durability and reliable processing even during system fluctuations.

Step 5: Save Data into a DynamoDB Table with Lambda Function
* Description: Develop a Lambda function to write the processed data into an Amazon DynamoDB table.
* Benefit: DynamoDB provides a fully managed NoSQL database, offering seamless scalability, performance, and high availability for your data storage needs.

Step 6: Enable DynamoDB Stream for Real-time Data Updates
* Description: Enable DynamoDB Stream to capture real-time updates to the DynamoDB table.
* Benefit: DynamoDB Stream allows you to process and react to data changes in real-time, enabling various use cases such as event-driven architectures and data replication.

Step 7: Process DynamoDB Stream Data with Another Lambda Function
* Description: Create a separate Lambda function to process the data received from the DynamoDB Stream.
* Benefit: This enables you to react to changes in the DynamoDB table and take specific actions based on the streamed data, ensuring seamless event handling.

Step 8: Store Processed Data in CSV Format to an S3 Bucket
* Description: Save the processed data in CSV format to an Amazon S3 bucket.
* Benefit: Storing data in S3 provides a durable and scalable solution for data storage, making it accessible for various downstream processing tasks.

Step 9: Run Queries on S3 Data using Amazon Athena
* Description: Utilize Amazon Athena to run SQL queries and analyze the data stored in the S3 bucket.
* Benefit: Athena allows you to analyze data without the need for complex ETL (Extract, Transform, Load) processes, providing quick and cost-effective insights.

Step 10: Store Athena Results in AWS Glue Data Catalog
* Description: Use AWS Glue's data catalog to store metadata about the data analyzed by Athena.
* Benefit: AWS Glue simplifies data discovery and querying by maintaining a centralized and organized catalog of the data, facilitating data management tasks.

Step 11: Monitor S3 Bucket Changes with CloudTrail
* Description: Set up AWS CloudTrail to monitor and track S3 bucket activity for any configuration changes.
* Benefit: CloudTrail provides comprehensive visibility into S3 bucket activities, enhancing security and enabling compliance with auditing requirements.

Step 12: Notify Users of S3 Bucket Changes via SNS Topic
* Description: Configure an EventBridge rule to trigger an SNS topic notification when specific S3 bucket changes are detected by CloudTrail.
* Benefit: SNS notifications provide a reliable way to alert users about critical S3 bucket changes in real time, ensuring timely actions and responses.

APPLICATION BUILT IN 5 PARTS

Part 1 - Create an SQS queue and add a message manually. This will trigger a productVisitsDataHandler Lambda function that will both create an item in the DynamoDB table and add a record to the CloudWatch log.
![Serverless P1](https://github.com/Spidey44/AWS/assets/83247073/f86bf959-98c6-4b9a-bace-4961c601aaf9)

Part 2 - Create a DynamoDB Stream from the table previously created. A Lambda function will read the items from the stream and then write the information into an S3 bucket serving as a data lake. A CloudWatch Log will capture all the records in case an error occurs.
![Serverless P2](https://github.com/Spidey44/AWS/assets/83247073/6c721f29-8501-4fd7-9d0e-4e5a1f8039cd)

Part 3 - Create the Static website with S3 that speaks to API Gateway with Lambda proxy function that will send the message created in Part 1. Test by completing the form http://product-visits-webform-2023.s3-website-us-east-1.amazonaws.com/ and make sure the item has been added to the DynamoDB table and the S3 datalake.
![Serverless P3](https://github.com/Spidey44/AWS/assets/83247073/10278163-dd1a-48aa-bcfe-3ce61cefded6)

Part 4 - Add the ability to track config changes to our resources. Enable CloudTrail to log all API calls made in relation to the bucket. An SNS topic will listen to any config change event and send a notification.
![Serverless P4](https://github.com/Spidey44/AWS/assets/83247073/d2e7c092-c8f4-45b4-b1f6-23769cd05689)

Part 5 - Amazon Athena will be used along with AWS Glue Catalog to perform SQL queries on the information put on the S3 Data Lake Bucket.
![Serverless P5](https://github.com/Spidey44/AWS/assets/83247073/1eb86fef-0d3a-477e-81bf-421fac4afa07)

